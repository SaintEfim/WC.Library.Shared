name: Publish NuGet Package

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and Publish NuGet Package

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Check for changes in project files
        id: check-changes
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD)

          # Фильтруем несущественные файлы
          ESSENTIAL_CHANGES=$(echo "$CHANGED_FILES" | grep -Ev "\.editorconfig$|\.gitignore$|\.yml$|\.sln$|^\.github/")

          echo "Filtered essential changes: $ESSENTIAL_CHANGES"

          # Если нет изменений, ничего не делаем
          if [ -z "$ESSENTIAL_CHANGES" ]; then
            echo "No essential changes detected. Skipping publish."
            echo "should_publish=false" >> $GITHUB_ENV
            exit 0
          fi

          # Проверяем, есть ли изменения в проектных файлах
          if echo "$ESSENTIAL_CHANGES" | grep -Eq "src/WC.Library.Shared"; then
            echo "Changes detected in project files."
            echo "should_publish=true" >> $GITHUB_ENV
          else
            echo "No changes detected in relevant project files. Skipping publish."
            echo "should_publish=false" >> $GITHUB_ENV
          fi

      - name: Check if we need to continue
        if: env.should_publish == 'false'
        run: |
          echo "No changes detected, skipping version increment and publishing."
          exit 0

      - name: Get latest version from NuGet
        if: env.should_publish == 'true'
        id: get-version
        run: |
          PACKAGE_ID="wc.library.shared"
          PACKAGE_VERSION=$(curl -s https://api.nuget.org/v3-flatcontainer/${PACKAGE_ID}/index.json | jq -r '.versions[-1]')

          if [ -z "$PACKAGE_VERSION" ]; then
            echo "No versions found on NuGet for $PACKAGE_ID. Starting from 1.0.0."
            NEW_VERSION="1.0.0"
          else
            echo "Latest version of $PACKAGE_ID: $PACKAGE_VERSION"
            NEW_VERSION=$(echo $PACKAGE_VERSION | awk -F. -v OFS=. '{$NF++; print}')
          fi

          echo "New version for $PACKAGE_ID: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update version in csproj
        if: env.should_publish == 'true'
        run: |
          dotnet build src/WC.Library.Shared/WC.Library.Shared.csproj /p:Version=${{ env.version }}

      - name: Build and pack
        if: env.should_publish == 'true'
        run: |
          dotnet pack src/WC.Library.Shared/WC.Library.Shared.csproj -c Release -o ./out

      - name: Publish package to NuGet
        if: env.should_publish == 'true'
        run: |
          dotnet nuget push ./out/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
